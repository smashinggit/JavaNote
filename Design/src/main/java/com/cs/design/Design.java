package com.cs.design;

/**
 * @author ：chensen
 * @date ：Created in 2019/4/30 11:17
 * @description：设计模式
 * @modified By：
 * @version: $
 * 一、单一职责原则   Single Responsibility Principle，简称是SRP
 * 单一职责原则的定义是：应该有且仅有一个原因引起类的变更
 * There should never be more than one reason for a class to change
 * <p>
 * 二、里氏替换原则  Liskov Substitution Principle，LSP
 * 所有引用基类的地方必须能透明地使用其子类的对象。
 * 通俗点讲，只要父类能出现的地方子类就可以出现，而且替换为子类也不会产生任何错误或异常，使用者可能根本就不需要知道是父类还是子类
 * <p>
 * 三、依赖倒置原则（Dependence Inversion Principle,DIP）
 * 模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系，其依赖关系是通过接口或抽象类产生
 * 接口或抽象类不依赖于实现类
 * 实现类依赖接口或抽象类
 * 更加精简的定义就是“面向接口编程”——OOD（Object-Oriented Design，面向对象设计）
 * 依赖倒置原则的本质就是通过抽象（接口或抽象类）使各个类或模块的实现彼此独立，不互相影响，实现模块间的松耦合
 * 接口负责定义public属性和方法，并且声明与其他对象的依赖关系，
 * 抽象类负责公共构造部分的实现，
 * 实现类准确的实现业务逻辑，同时在适当的时候对父类进行细化
 * 四、接口隔离原则
 * 接口隔离原则是对接口进行规范约束，其包含以下4层含义：
 * 1.接口要尽量小，不出现臃肿的接口（Fat Interface），但是“小”是有限度的，首先就是不能违反单一职责原则，不能过度设计
 * 2.接口要高内聚。高内聚就是提高接口、类、模块的处理能力，减少对外的交互
 * 具体到接口隔离原则就是，要求在接口中尽量少公布public方法，接口是对外的承诺，
 * 承诺越少对系统的开发越有利，变更的风险也就越少，同时也有利于降低成本。
 * 3.定制服务
 * 只提供访问者需要的方法
 * 4.接口设计是有限度的
 * 五、迪米特法则  也称为最少知识原则
 * 一个对象应该对其他对象有最少的了解
 * 迪米特法则的核心观念就是类间解耦，弱耦合，只有弱耦合了以后，类的复用率才可以提高
 * 六、开闭原则
 *
 */
public class Design {
}
